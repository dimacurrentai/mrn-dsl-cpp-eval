// NOTE(dkorolev): This is suboptimal, but it ensures the code builds just with `g++ src.cc`, w/o `-std=c++17`.
#define CURRENT_FOR_CPP14

#include <iostream>
#include <fstream>

#include "current/bricks/dflags/dflags.h"
#include "current/bricks/file/file.h"
#include "current/typesystem/serialization/json.h"

#include "ir.h"

DEFINE_string(in, "", "The input file to parse the JSON of the IR from.");
DEFINE_string(name, "default", "The name to use for the autogenerated tests.");
DEFINE_string(out, "/dev/stdout", "The output file to dump the C++ code into.");

inline std::string StatementAsCode(MaroonIRStatement const& stmt) {
  struct StatementAsCodeVisitor final {
    std::ostringstream oss;
    void operator()(MaroonIRCodeStatement const& stmt) {
      oss << "ImplStmt(" << stmt.code << ')';
    }
  };
  StatementAsCodeVisitor visitor;
  stmt.Call(visitor);
  return visitor.oss.str();
}

inline void GenerateTestCase(std::ostream& fo, MaroonTestCase const& test, std::string const& name, size_t idx) {
  if (idx == 1) {
    fo << "TEST(Maroon, " << name << ") {" << std::endl;
  } else {
    fo << "TEST(Maroon, " << name << "_" << idx << ") {" << std::endl;
  }
  struct GenerateTestCaseVisitor final {
    std::string const& name;
    std::ostream& fo;
    GenerateTestCaseVisitor(std::string const& name, std::ostream& fo) : name(name), fo(fo) {}
    void operator()(MaroonTestCaseSimple const& test) {
      fo << "  MaroonEngine<" << test.maroon << "> engine;" << std::endl;
      std::ostringstream oss;
      for (auto const& e : test.debug_statements) {
        // TODO(dkorolev): Handle the timestamps too.
        oss << e.msg << std::endl;
      }
      fo << "  EXPECT_EQ(R\"\"\"(" << oss.str() << ")\"\"\", engine.report);" << std::endl;
    }
    void operator()(MaroonTestCaseComplex const& test) {
      fo << "#error \"Not implemented.\"" << std::endl;
    }
  };
  GenerateTestCaseVisitor visitor(name, fo);
  test.Call(visitor);
  fo << '}' << std::endl;
}

int main(int argc, char** argv) {
  ParseDFlags(&argc, &argv);

  if (FLAGS_in.empty()) {
    std::cerr << "The `--in` parameter is required." << std::endl;
    std::exit(1);
  }

  std::ofstream fo(FLAGS_out);

  MaroonIRScenarios scenarios;
  try {
    using T = decltype(scenarios);
    scenarios = ParseJSON<T, JSONFormat::Minimalistic>(current::FileSystem::ReadFileAsString(FLAGS_in));
  } catch (current::Exception const&) {
    std::cerr << "Failed to read and parse the IR JSON from `" << FLAGS_in << "`." << std::endl;
    std::exit(1);
  }

  fo << "#pragma once" << std::endl;
  fo << std::endl;
  fo << "#include \"../src/engine.h\"" << std::endl;
  fo << std::endl;
  fo << "#define CURRENT_FOR_CPP14" << std::endl;

  for (auto const& [maroon_name, maroon] : scenarios.maroon) {
    fo << std::endl;
    fo << "struct " << maroon_name << " final : ImplMaroon {" << std::endl;
    for (auto const& [fiber_name, fiber] : maroon.fibers) {
      fo << "  struct " << fiber_name << " final : ImplFiber {" << std::endl;
      for (auto const& [fn_name, fn] : fiber.functions) {
        fo << "    struct " << fn_name << " final : ImplFunction {" << std::endl;
        fo << "      " << fn_name << "() : ImplFunction ({" << std::endl;
        // TODO(dkorolev): This should be `.statements`.
        for (auto const& stmt : fn) {
          fo << "          " << StatementAsCode(stmt) << ',' << std::endl;
        }
        fo << "      }) {}" << std::endl;
        fo << "    };" << std::endl;
      }
      fo << "  };" << std::endl;
    }
    fo << "};" << std::endl;
  }

  size_t index = 0;
  for (auto const& test : scenarios.tests) {
    fo << std::endl;
    GenerateTestCase(fo, test, FLAGS_name, ++index);
  }
}

MAROON(variable) {
  FIBER(test1) {
    FN(main) {
      VAR(a, U64, 100);
      STMT({
        DEBUG_EXPR(a);
        DEBUG_DUMP_VARS();
        a = a + U64(1);
        DEBUG_DUMP_VARS();
      });
      STMT({
        DEBUG_EXPR(a);
        RETURN();
      });
    };
  };
  FIBER(test2) {
    FN(main) {
      VAR(x, U64, 1);
      STMT({
        x *= U64(10);
        DEBUG_DUMP_VARS();
      });
      BLOCK {
        VAR(y, U64, 2);
        STMT({
          x *= U64(10);
          y *= U64(10);
          DEBUG_DUMP_VARS();
        });
        BLOCK {
          VAR(z, U64, 3);
          STMT({
            x *= U64(10);
            y *= U64(10);
            z *= U64(10);
            DEBUG_DUMP_VARS();
          });
        };
        BLOCK {
          VAR(t, U64, 4);
          STMT({
            x *= U64(10);
            y *= U64(10);
            // z *= U64(10);  <--  NOTE(dkorolev): This will not compile.
            t *= U64(10);
            DEBUG_DUMP_VARS();
          });
        };
        STMT({
          RETURN();
        });
      };
    };
  };
  FIBER(test3) {
    FN(main) {
      VAR(b, BOOL, false);
      STMT({
        DEBUG_EXPR(b);
        DEBUG_DUMP_VARS();
      });
      STMT(b = true);
      STMT({
        DEBUG_EXPR(b);
        DEBUG_DUMP_VARS();
        RETURN();
      });
    };
  };
  // NOTE(dkorolev): These `_` tests are not run, they are just to look at the JSON.
  FIBER(_00_main_empty) {
    FN(main) {
    };
  };
  FIBER(_01_main_with_empty_block) {
    FN(main) {
      BLOCK {};
    };
  };
  FIBER(_02_main_with_two_empty_blocks) {
    FN(main) {
      BLOCK {
        BLOCK {};
      };
    };
  };
  FIBER(_03_nested_blocks) {
    FN(name) {
      VAR(a, U64, 1);
      STMT({
        DEBUG_DUMP_VARS();
      });
      BLOCK {
        VAR(b, U64, 2);
        STMT({
          DEBUG_DUMP_VARS();
        });
      };
      STMT({
        DEBUG_DUMP_VARS();
      });
    };
  };
};

TEST_FIBER(
  variable,
  test1,
  {
    "a=100",
    "[a:100]",
    "[a:101]",
    "a=101",
  });

TEST_FIBER(
  variable,
  test2,
  {
    "[x:10]",
    "[x:100,y:20]",
    "[x:1000,y:200,z:30]",
    "[x:10000,y:2000,t:40]"
  });

TEST_FIBER(
  variable,
  test3,
  {
    "b=false",
    "[b:false]",
    "b=true",
    "[b:true]",
  });
